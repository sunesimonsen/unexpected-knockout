/*global unexpected*/
// THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT MANUALLY.
// It is built based on the examples in the documentation folder
// when the documentation site gets build by running "make site-build".
it.skipIf = function (condition) {
    (condition ? it.skip : it).apply(it, Array.prototype.slice.call(arguments, 1));
};

describe("documentation tests", function () {
    var isBrowser = typeof weknowhow !== 'undefined';
    var isPhantom = typeof mochaPhantomJS !== 'undefined';
    var expect;
    beforeEach(function () {
        expect = unexpected.clone();
        expect.output.preferredWidth = 80;

    });

    it("assertions/any/to-equal.md contains correct examples", function () {
        var testPromises = [];
        expect(ko.observable(42), 'to equal', ko.observable(42));

        expect(ko.observable({
            id: '4331241234',
            name: ko.observable('test'),
            age: ko.observable(42)
        }), 'to equal', ko.observable({
            id: '4331241234',
            name: ko.observable('test'),
            age: ko.observable(42)
        }));

        expect(ko.computed(function () {
            return {
                foo: ko.observable(42)
            }
        }), 'to equal', ko.computed(function () {
            return {
                foo: ko.observable(42)
            }
        }));

        try {
            expect(ko.observable('f00'), 'to equal', ko.observable('foo'));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.observable('f00'), 'to equal', ko.observable('foo'));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.observable('f00') to equal ko.observable('foo')\n" +
                "\n" +
                "ko.observable(\n" +
                "  'f00' // should equal 'foo'\n" +
                "        // -f00\n" +
                "        // +foo\n" +
                ")"
            );
        }

        expect(ko.observable(42), 'not to equal', ko.observable(24));
        expect(ko.observable({ foo: 42, bar: 23 }), 'not to equal', ko.observable({ foo: 42, bar: 24 }));
        expect(ko.observable({ foo: 42, bar: 23 }), 'not to equal', 42);

        expect(ko.observable({
            foo: ko.observable(42)
        }), 'not to equal', ko.observable({
            foo: ko.observable(24)
        }));

        expect(ko.observable({
            foo: ko.observable(42)
        }), 'not to equal', ko.observable({
            bar: ko.observable(42)
        }));

        expect(ko.computed(function () {
            return 42;
        }), 'not to equal', ko.observable(24));

        try {
            expect(ko.observable(42), 'not to equal', ko.observable(42));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.observable(42), 'not to equal', ko.observable(42));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.observable(42) not to equal ko.observable(42)"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/knockout-computed/to-be-computed.md contains correct examples", function () {
        var testPromises = [];
        expect(ko.computed(function () {
            return 42;
        }), 'to be observable');

        try {
            expect(ko.observable(42), 'to be computed');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.observable(42), 'to be computed');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.observable(42) to be computed"
            );
        }

        expect(ko.observable(42), 'not to be computed');

        try {
            expect(ko.computed(function () {
                return 42;
            }), 'not to be computed');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.computed(function () {").nl();
                output.code("    return 42;").nl();
                output.code("}), 'not to be computed');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.computed(42) not to be computed"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/knockout-computed/to-satisfy.md contains correct examples", function () {
        var testPromises = [];
        try {
            expect(ko.computed(function () {
              return { foo: 'f00!' };
            }), 'to satisfy', { foo: 'foo' });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.computed(function () {").nl();
                output.code("  return { foo: 'f00!' };").nl();
                output.code("}), 'to satisfy', { foo: 'foo' });").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.computed({ foo: 'f00!' }) to satisfy { foo: 'foo' }\n" +
                "\n" +
                "ko.computed({\n" +
                "  foo: 'f00!' // should equal 'foo'\n" +
                "              // -f00!\n" +
                "              // +foo\n" +
                "})"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/knockout-observable/to-be-observable.md contains correct examples", function () {
        var testPromises = [];
        expect(ko.observable(42), 'to be observable');

        try {
            expect(42, 'to be observable');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(42, 'to be observable');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 42 to be observable"
            );
        }

        expect(42, 'not to be observable');

        try {
            expect(ko.observable(42), 'not to be observable');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.observable(42), 'not to be observable');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.observable(42) not to be observable"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/knockout-observable/to-satisfy.md contains correct examples", function () {
        var testPromises = [];
        try {
            expect(ko.observable({ foo: 'f00!' }), 'to satisfy', {
              foo: expect.it('to have length', 3)
            });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.observable({ foo: 'f00!' }), 'to satisfy', {").nl();
                output.code("  foo: expect.it('to have length', 3)").nl();
                output.code("});").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.observable({ foo: 'f00!' })\n" +
                "to satisfy { foo: expect.it('to have length', 3) }\n" +
                "\n" +
                "ko.observable({\n" +
                "  foo: 'f00!' // should have length 3\n" +
                "              //   expected 4 to be 3\n" +
                "})"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/wrapperObject/to-satisfy.md contains correct examples", function () {
        var testPromises = [];
        expect(ko.observable({
            id: '4331241234',
            name: ko.observable('test'),
            age: ko.observable(42)
        }), 'to satisfy', {
            id: '4331241234',
            name: 'test',
            age: 42
        });

        try {
            expect(ko.observable({
                id: '4331241234',
                name: ko.observable('test'),
                age: ko.observable(42),
            }), 'to satisfy', {
                id: '4331241234',
                name: 'hest',
                age: 41
            });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(ko.observable({").nl();
                output.code("    id: '4331241234',").nl();
                output.code("    name: ko.observable('test'),").nl();
                output.code("    age: ko.observable(42),").nl();
                output.code("}), 'to satisfy', {").nl();
                output.code("    id: '4331241234',").nl();
                output.code("    name: 'hest',").nl();
                output.code("    age: 41").nl();
                output.code("});").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected ko.observable({ id: '4331241234', name: ko.observable('test'), age: ko.observable(42) })\n" +
                "to satisfy { id: '4331241234', name: 'hest', age: 41 }\n" +
                "\n" +
                "ko.observable({\n" +
                "  id: '4331241234',\n" +
                "  name: ko.observable('test'), // should equal 'hest'\n" +
                "                               // -test\n" +
                "                               // +hest\n" +
                "  age: ko.observable(42) // should equal 41\n" +
                "})"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("index.md contains correct examples", function () {
        var testPromises = [];
        expect(ko.observable(42), 'to equal', ko.observable(42));
        expect(ko.observable(42), 'not to equal', ko.observable(24));
        expect(ko.observable(42), 'to be observable');
        expect(42, 'not to be observable');
        expect(ko.observable(42), 'not to be computed');
        expect(ko.computed(function () { return 42 }), 'to be computed');
        expect({
            foo: ko.observable(42),
            bar: ko.observable(42),
            baz: 42,
            qux: ko.computed(function () {
                return 42;
            })
        }, 'to have properties', {
            foo: ko.observable(42),
            baz: 42,
            qux: ko.computed(function () {
                return 42;
            })
        });
        return expect.promise.all(testPromises);
    });
});
