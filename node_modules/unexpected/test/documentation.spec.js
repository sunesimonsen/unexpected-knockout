// THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT MANUALLY.
// It is built based on the examples in the documentation folder
// when the documentation site gets build by running "make site-build".
it.skipIf = function (condition) {
    (condition ? it.skip : it).apply(it, Array.prototype.slice.call(arguments, 1));
};

describe("documentation tests", function () {
    var unexpected = typeof weknowhow === 'undefined' ? require('../lib/').clone() : weknowhow.expect.clone();
    unexpected.output.preferredWidth = 80;

    var isBrowser = typeof weknowhow !== 'undefined';
    var isPhantom = typeof mochaPhantomJS !== 'undefined';
    var expect;
    beforeEach(function () {
        expect = unexpected.clone();
    });

    it("api/addAssertion.md contains correct examples", function () {
        var testPromises = [];
        var errorMode = 'default'; // use to control the error mode later in the example
        expect.addAssertion('array', '[not] to be (sorted|ordered)', function(expect, subject, cmp) {
          this.errorMode = errorMode;
          expect(subject, '[not] to equal', [].concat(subject).sort(cmp));
        });

        expect([1,2,3], 'to be sorted');
        expect([1,2,3], 'to be ordered');
        expect([2,1,3], 'not to be sorted');
        expect([2,1,3], 'not to be ordered');
        expect([3,2,1], 'to be sorted', function (x, y) { return y - x; });

        try {
            expect([ 1, 3, 2, 4 ], 'to be sorted');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([ 1, 3, 2, 4 ], 'to be sorted');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1, 3, 2, 4 ] to be sorted\n" +
                "\n" +
                "[\n" +
                "  1,\n" +
                "  3, // should equal 2\n" +
                "  2, // should equal 3\n" +
                "  4\n" +
                "]"
            );
        }

        try {
            errorMode = 'bubble';
            expect([ 1, 3, 2, 4 ], 'to be sorted');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("errorMode = 'bubble';").nl();
                output.code("expect([ 1, 3, 2, 4 ], 'to be sorted');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1, 3, 2, 4 ] to equal [ 1, 2, 3, 4 ]\n" +
                "\n" +
                "[\n" +
                "  1,\n" +
                "  3, // should equal 2\n" +
                "  2, // should equal 3\n" +
                "  4\n" +
                "]"
            );
        }

        try {
            errorMode = 'nested';
            expect([ 1, 3, 2, 4 ], 'to be sorted');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("errorMode = 'nested';").nl();
                output.code("expect([ 1, 3, 2, 4 ], 'to be sorted');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1, 3, 2, 4 ] to be sorted\n" +
                "  expected [ 1, 3, 2, 4 ] to equal [ 1, 2, 3, 4 ]\n" +
                "\n" +
                "  [\n" +
                "    1,\n" +
                "    3, // should equal 2\n" +
                "    2, // should equal 3\n" +
                "    4\n" +
                "  ]"
            );
        }

        function Timelock(value, delay) {
          this.value = value;
          this.delay = delay;
        }

        Timelock.prototype.getValue = function (cb) {
          var that = this;
          setTimeout(function () {
            cb(that.value);
          }, this.delay);
        };

        expect.addType({
          name: 'Timelock',
          identify: function (value) {
            return value && value instanceof Timelock;
          },
          inspect: function (value, depth, output) {
            output.jsFunctionName('Timelock');
          }
        });

        expect.addAssertion('Timelock', 'to satisfy', function (expect, subject, spec) {
          return expect.promise(function (run) {
            subject.getValue(run(function (value) {
              return expect(value, 'to satisfy', spec);
            }));
          });
        });

        testPromises.push(expect.promise(function () {
            return expect(new Timelock('Hello world!', 5), 'to satisfy', expect.it('not to match', /!/));
        }).then(function () {
            return expect.promise(function () {
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("return expect(new Timelock('Hello world!', 5), 'to satisfy', expect.it('not to match', /!/));").nl();
                    output.error("to throw");
                });
            });
        }).caught(function (e) {
            expect(e, "to have message",
                "expected Timelock to satisfy expect.it('not to match', /!/)\n" +
                "\n" +
                "expected 'Hello world!' not to match /!/\n" +
                "\n" +
                "Hello world!"
            );
        }));

        return expect.promise.all(testPromises);
    });

    it("api/addType.md contains correct examples", function () {
        var testPromises = [];
        function Person(name, age) {
            this.name = name;
            this.age = age;
        }

        expect.addType({
            name: 'Person',
            base: 'object',
            identify: function (value) {
                return value instanceof Person;
            }
        });

        try {
            expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected Person({ name: 'John Doe', age: 42 }) to equal Person({ name: 'Jane Doe', age: 24 })\n" +
                "\n" +
                "Person({\n" +
                "  name: 'John Doe', // should equal 'Jane Doe'\n" +
                "                    // -John Doe\n" +
                "                    // +Jane Doe\n" +
                "  age: 42 // should equal 24\n" +
                "})"
            );
        }

        expect.addType({
            name: 'Person',
            base: 'object',
            identify: function (value) {
                return value instanceof Person;
            },
            inspect: function (person, depth, output, inspect) {
               output.text('new Person(')
                     .append(inspect(person.name, depth))
                     .text(', ')
                     .append(inspect(person.age, depth))
                     .text(')');
            }
        });

        try {
            expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected new Person('John Doe', 42) to equal new Person('Jane Doe', 24)\n" +
                "\n" +
                "Person({\n" +
                "  name: 'John Doe', // should equal 'Jane Doe'\n" +
                "                    // -John Doe\n" +
                "                    // +Jane Doe\n" +
                "  age: 42 // should equal 24\n" +
                "})"
            );
        }

        expect.addType({
            name: 'Person',
            base: 'object',
            identify: function (value) {
                return value instanceof Person;
            },
            inspect: function (person, depth, output, inspect) {
               output.text('new Person(')
                     .append(inspect(person.name, depth))
                     .text(', ')
                     .append(inspect(person.age, depth))
                     .text(')');
            },
            equal: function (a, b, equal) {
                return a === b || equal(a.name, b.name);
            }
        });

        expect.addType({
            name: 'Person',
            base: 'object',
            identify: function (value) {
                return value instanceof Person;
            },
            inspect: function (person, depth, output, inspect) {
               output.text('new Person(')
                     .append(inspect(person.name, depth))
                     .text(', ')
                     .append(inspect(person.age, depth))
                     .text(')');
            },
            equal: function (a, b, equal) {
                return a === b || equal(a.name, b.name);
            },
            diff: function (actual, expected, output, diff, inspect) {
                return this.baseType.diff({name: actual.name}, {name: expected.name});
            }
        });

        try {
            expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected new Person('John Doe', 42) to equal new Person('Jane Doe', 24)\n" +
                "\n" +
                "{\n" +
                "  name: 'John Doe' // should equal 'Jane Doe'\n" +
                "                   // -John Doe\n" +
                "                   // +Jane Doe\n" +
                "}"
            );
        }

        var inlineDiff = true; // used to change inlining in a later example

        expect.addType({
            name: 'Person',
            base: 'object',
            identify: function (value) {
                return value instanceof Person;
            },
            inspect: function (person, depth, output, inspect) {
               output.text('new Person(')
                     .append(inspect(person.name, depth))
                     .text(', ')
                     .append(inspect(person.age, depth))
                     .text(')');
            },
            equal: function (a, b, equal) {
                return a === b || equal(a.name, b.name);
            },
            diff: function (actual, expected, output, diff, inspect) {
                var nameDiff = diff(actual.name, expected.name);

                output.text('new Person(')
                      .nl()
                      .indentLines();

                if (nameDiff && nameDiff.inline) {
                    output.append(nameDiff.diff);
                } else {
                    output.i().append(inspect(actual.name)).text(',').sp()
                          .annotationBlock(function () {
                              this.error('should be ').append(inspect(expected.name));
                              if (nameDiff) {
                                  this.nl().append(nameDiff.diff);
                              }
                          })
                          .nl();
                }

                output.i().append(inspect(actual.age))
                      .outdentLines()
                      .nl()
                      .text(')');

                return {
                    inline: inlineDiff,
                    diff: output
                };
            }
        });

        try {
            expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(new Person('John Doe', 42), 'to equal', new Person('Jane Doe', 24));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected new Person('John Doe', 42) to equal new Person('Jane Doe', 24)\n" +
                "\n" +
                "new Person(\n" +
                "  'John Doe', // should be 'Jane Doe'\n" +
                "              // -John Doe\n" +
                "              // +Jane Doe\n" +
                "  42\n" +
                ")"
            );
        }

        try {
            inlineDiff = true;
            expect(
              {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Janie Doe', 24)},
              'to equal',
              {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Jane Doe', 24)}
            );
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("inlineDiff = true;").nl();
                output.code("expect(").nl();
                output.code("  {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Janie Doe', 24)},").nl();
                output.code("  'to equal',").nl();
                output.code("  {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Jane Doe', 24)}").nl();
                output.code(");").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected\n" +
                "{\n" +
                "  'John Doe': new Person('John Doe', 42),\n" +
                "  'Jane Doe': new Person('Janie Doe', 24)\n" +
                "}\n" +
                "to equal\n" +
                "{\n" +
                "  'John Doe': new Person('John Doe', 42),\n" +
                "  'Jane Doe': new Person('Jane Doe', 24)\n" +
                "}\n" +
                "\n" +
                "{\n" +
                "  'John Doe': new Person('John Doe', 42),\n" +
                "  'Jane Doe': new Person(\n" +
                "    'Janie Doe', // should be 'Jane Doe'\n" +
                "                 // -Janie Doe\n" +
                "                 // +Jane Doe\n" +
                "    24\n" +
                "  )\n" +
                "}"
            );
        }

        try {
            inlineDiff = false;
            expect(
              {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Janie Doe', 24)},
              'to equal',
              {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Jane Doe', 24)}
            );
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("inlineDiff = false;").nl();
                output.code("expect(").nl();
                output.code("  {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Janie Doe', 24)},").nl();
                output.code("  'to equal',").nl();
                output.code("  {'John Doe': new Person('John Doe', 42), 'Jane Doe': new Person('Jane Doe', 24)}").nl();
                output.code(");").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected\n" +
                "{\n" +
                "  'John Doe': new Person('John Doe', 42),\n" +
                "  'Jane Doe': new Person('Janie Doe', 24)\n" +
                "}\n" +
                "to equal\n" +
                "{\n" +
                "  'John Doe': new Person('John Doe', 42),\n" +
                "  'Jane Doe': new Person('Jane Doe', 24)\n" +
                "}\n" +
                "\n" +
                "{\n" +
                "  'John Doe': new Person('John Doe', 42),\n" +
                "  'Jane Doe': new Person('Janie Doe', 24) // should equal new Person('Jane Doe', 24)\n" +
                "                                          // new Person(\n" +
                "                                          //   'Janie Doe', // should be 'Jane Doe'\n" +
                "                                          //                // -Janie Doe\n" +
                "                                          //                // +Jane Doe\n" +
                "                                          //   24\n" +
                "                                          // )\n" +
                "}"
            );
        }

        expect.addAssertion('Person', 'to be above legal age', function (expect, subject) {
            expect(subject.age, 'to be greater than or equal to', 18);
        });

        expect(new Person('Jane Doe', 24), 'to be above legal age');

        expect(new Person('Jane Doe', 24), 'to have keys', 'name', 'age');
        expect(new Person('Jane Doe', 24), 'to satisfy', {
            name: expect.it('to be a string').and('not to be empty'),
            age: expect.it('to be a number').and('not to be negative')
        });
        return expect.promise.all(testPromises);
    });

    it("api/clone.md contains correct examples", function () {
        var testPromises = [];
        var originalExpect = expect;

        expect = expect.clone().addAssertion('to be an integer', function (expect, subject) {
          expect(subject, 'to be a number');
          expect(Math.round(subject), 'to be', subject);
        });

        expect(42, 'to be an integer');

        try {
            originalExpect(42, 'to be an integer');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("originalExpect(42, 'to be an integer');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "Unknown assertion \"to be an integer\", did you mean: \"to be a number\""
            );
        }
        return expect.promise.all(testPromises);
    });

    it("api/fail.md contains correct examples", function () {
        var testPromises = [];
        try {
            expect.fail();
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect.fail();").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "Explicit failure"
            );
        }

        try {
            expect.fail('Custom failure message');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect.fail('Custom failure message');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "Custom failure message"
            );
        }

        try {
            expect.fail('{0} was expected to be {1}', 0, 'zero');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect.fail('{0} was expected to be {1}', 0, 'zero');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "0 was expected to be 'zero'"
            );
        }

        try {
            var error = new Error('throw me');
            expect.fail(new Error(error));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("var error = new Error('throw me');").nl();
                output.code("expect.fail(new Error(error));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "Error: throw me"
            );
        }

        try {
            expect.fail(function (output) {
              'You have been a very bad boy!'.split(/ /).forEach(function (word, index) {
                if (index > 0) { output.sp(); }
                var style = index % 2 === 0 ? 'jsPrimitive' : 'jsString';
                output[style](word);
              });
            });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect.fail(function (output) {").nl();
                output.code("  'You have been a very bad boy!'.split(/ /).forEach(function (word, index) {").nl();
                output.code("    if (index > 0) { output.sp(); }").nl();
                output.code("    var style = index % 2 === 0 ? 'jsPrimitive' : 'jsString';").nl();
                output.code("    output[style](word);").nl();
                output.code("  });").nl();
                output.code("});").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "You have been a very bad boy!"
            );
        }

        try {
            expect.fail({
              message: function (output) {
                'You have been a very bad boy!'.split(/ /).forEach(function (word, index) {
                  if (index > 0) { output.sp(); }
                  var style = index % 2 === 0 ? 'jsPrimitive' : 'jsString';
                  output[style](word);
                });
              },
              diff: function (output, diff, inspect, equal) {
                return diff('You have been a very bad boy!', 'You have been a very mad boy!')
              }
            });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect.fail({").nl();
                output.code("  message: function (output) {").nl();
                output.code("    'You have been a very bad boy!'.split(/ /).forEach(function (word, index) {").nl();
                output.code("      if (index > 0) { output.sp(); }").nl();
                output.code("      var style = index % 2 === 0 ? 'jsPrimitive' : 'jsString';").nl();
                output.code("      output[style](word);").nl();
                output.code("    });").nl();
                output.code("  },").nl();
                output.code("  diff: function (output, diff, inspect, equal) {").nl();
                output.code("    return diff('You have been a very bad boy!', 'You have been a very mad boy!')").nl();
                output.code("  }").nl();
                output.code("});").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "You have been a very bad boy!\n" +
                "\n" +
                "-You have been a very bad boy!\n" +
                "+You have been a very mad boy!"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("api/installPlugin.md contains correct examples", function () {
        var testPromises = [];
        function IntegerInterval(from, to) {
          this.from = from;
          this.to = to;
        }

        expect.installPlugin({
          name: 'unexpected-integer-intervals',
          installInto: function (expect) {
              expect.addType({
                name: 'IntegerInterval',
                base: 'object',
                identify: function (value) {
                  return value && value instanceof IntegerInterval;
                },
                inspect: function (value, depth, output) {
                  output.text('[').jsNumber(value.from).text(',').jsNumber(value.to).text(']');
                }
              });

             expect.addAssertion('[not] to contain', function (expect, subject, value) {
               expect(value, '[not] to be within', subject.from, subject.to);
             });
          }
        });

        expect(new IntegerInterval(7, 13), 'to contain', 9);

        try {
            expect(new IntegerInterval(7, 13), 'to contain', 27);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(new IntegerInterval(7, 13), 'to contain', 27);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [7,13] to contain 27"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("api/promise-all.md contains correct examples", function () {
        var testPromises = [];
        expect.addAssertion('to be a number after a short delay', function (expect, subject) {
          return expect.promise(function (run) {
            setTimeout(run(function () {
                expect(subject, 'to be a number');
            }), 1);
          });
        });

        testPromises.push(expect.promise(function () {
            return expect.promise.all({
              foo: [
                expect(42, 'to be a number after a short delay')
              ],
              bar: expect([0, 1, 2], 'to have items satisfying',
                                     expect.it('to be a number after a short delay')),

              baz: expect({ a: 1, b: 2 }, 'to have values satisfying',
                                          'to be a number after a short delay')
            });
        }));

        testPromises.push(expect.promise(function () {
            return expect.promise.all({
              foo: [
                expect(42, 'to be a number after a short delay')
              ],
              bar: expect([0, 1, 2], 'to have items satisfying',
                                     expect.it('to be a number after a short delay')),

              baz: expect({ a: '0', b: 1 }, 'to have values satisfying',
                                            'to be a number after a short delay')
            });
        }).then(function () {
            return expect.promise(function () {
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("return expect.promise.all({").nl();
                    output.code("  foo: [").nl();
                    output.code("    expect(42, 'to be a number after a short delay')").nl();
                    output.code("  ],").nl();
                    output.code("  bar: expect([0, 1, 2], 'to have items satisfying',").nl();
                    output.code("                         expect.it('to be a number after a short delay')),").nl();
                    output.code("").nl();
                    output.code("  baz: expect({ a: '0', b: 1 }, 'to have values satisfying',").nl();
                    output.code("                                'to be a number after a short delay')").nl();
                    output.code("});").nl();
                    output.error("to throw");
                });
            });
        }).caught(function (e) {
            expect(e, "to have message",
                "failed expectation in { a: '0', b: 1 }:\n" +
                "  a: expected '0' to be a number after a short delay"
            );
        }));

        return expect.promise.all(testPromises);
    });

    it("api/promise-any.md contains correct examples", function () {
        var testPromises = [];
        expect.addAssertion('to be a number after a short delay', function (expect, subject) {
          return expect.promise(function (run) {
            setTimeout(run(function () {
                expect(subject, 'to be a number');
            }), 0);
          });
        });

        testPromises.push(expect.promise(function () {
            return expect.promise.any({
              foo: [
                expect('42', 'to be a number after a short delay')
              ],
              bar: expect([0, 1, 2], 'to have items satisfying',
                                     expect.it('to be a number after a short delay')),

              baz: expect({ a: '1', b: 2 }, 'to have values satisfying',
                                            'to be a number after a short delay')
            });
        }));

        testPromises.push(expect.promise(function () {
            return expect.promise.any({
              foo: [
                expect('42', 'to be a number after a short delay')
              ],
              bar: expect([0, '1', 2], 'to have items satisfying',
                                       expect.it('to be a number after a short delay')),

              baz: expect({ a: '0', b: 1 }, 'to have values satisfying',
                                            'to be a number after a short delay')
            }).caught(function (aggregateError) {
              // Let's reformat the error a bit
              expect.fail(function (output) {
                output.error(aggregateError.message);
                var errors = [];
                for (var i = 0; i < aggregateError.length; i += 1) {
                  errors.push(aggregateError[i]);
                }

                errors.sort(function (a, b) { // Make the output stable
                  if (a.message < b.message) return -1;
                  if (a.message > b.message) return 1;
                  return 0;
                });

                output.indentLines();
                errors.forEach(function (e, i) {
                  output.nl().i().text(i + ': ').block(e.output);
                });
              });
            });
        }).then(function () {
            return expect.promise(function () {
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("return expect.promise.any({").nl();
                    output.code("  foo: [").nl();
                    output.code("    expect('42', 'to be a number after a short delay')").nl();
                    output.code("  ],").nl();
                    output.code("  bar: expect([0, '1', 2], 'to have items satisfying',").nl();
                    output.code("                           expect.it('to be a number after a short delay')),").nl();
                    output.code("").nl();
                    output.code("  baz: expect({ a: '0', b: 1 }, 'to have values satisfying',").nl();
                    output.code("                                'to be a number after a short delay')").nl();
                    output.code("}).caught(function (aggregateError) {").nl();
                    output.code("  // Let's reformat the error a bit").nl();
                    output.code("  expect.fail(function (output) {").nl();
                    output.code("    output.error(aggregateError.message);").nl();
                    output.code("    var errors = [];").nl();
                    output.code("    for (var i = 0; i < aggregateError.length; i += 1) {").nl();
                    output.code("      errors.push(aggregateError[i]);").nl();
                    output.code("    }").nl();
                    output.code("").nl();
                    output.code("    errors.sort(function (a, b) { // Make the output stable").nl();
                    output.code("      if (a.message < b.message) return -1;").nl();
                    output.code("      if (a.message > b.message) return 1;").nl();
                    output.code("      return 0;").nl();
                    output.code("    });").nl();
                    output.code("").nl();
                    output.code("    output.indentLines();").nl();
                    output.code("    errors.forEach(function (e, i) {").nl();
                    output.code("      output.nl().i().text(i + ': ').block(e.output);").nl();
                    output.code("    });").nl();
                    output.code("  });").nl();
                    output.code("});").nl();
                    output.error("to throw");
                });
            });
        }).caught(function (e) {
            expect(e, "to have message",
                "aggregate error\n" +
                "  0: expected '42' to be a number after a short delay\n" +
                "  1: failed expectation in [ 0, '1', 2 ]:\n" +
                "       1: expected '1' to be a number after a short delay\n" +
                "  2: failed expectation in { a: '0', b: 1 }:\n" +
                "       a: expected '0' to be a number after a short delay"
            );
        }));

        return expect.promise.all(testPromises);
    });

    it("api/promise-settle.md contains correct examples", function () {
        var testPromises = [];
        expect.addAssertion('to be a number after a short delay', function (expect, subject) {
          return expect.promise(function (run) {
            setTimeout(run(function () {
                expect(subject, 'to be a number');
            }), 1);
          });
        });

        testPromises.push(expect.promise(function () {
            var promises = {
              foo: expect('42', 'to be a number after a short delay'),
              bar: expect([0, 1, 2], 'to have items satisfying',
                                     expect.it('to be a number after a short delay')),
              baz: expect({ a: '1', b: 2 }, 'to have values satisfying',
                                            'to be a number after a short delay')
            };

            return expect.promise.all(promises).caught(function () {
              return expect.promise.settle(promises).then(function () {
                expect.fail(function (output) {
                  output.text('{').nl();
                  output.indentLines();
                  Object.keys(promises).forEach(function (key, index) {
                    output.i().jsKey(key).text(':').sp();
                    if (promises[key].isFulfilled()) {
                      output.success('✓');
                    } else {
                      output.error('⨯ ').block(promises[key].reason().output);
                    }
                    output.nl();
                  });
                  output.outdentLines();
                  output.text('}');
                });
              });
            });
        }).then(function () {
            return expect.promise(function () {
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("var promises = {").nl();
                    output.code("  foo: expect('42', 'to be a number after a short delay'),").nl();
                    output.code("  bar: expect([0, 1, 2], 'to have items satisfying',").nl();
                    output.code("                         expect.it('to be a number after a short delay')),").nl();
                    output.code("  baz: expect({ a: '1', b: 2 }, 'to have values satisfying',").nl();
                    output.code("                                'to be a number after a short delay')").nl();
                    output.code("};").nl();
                    output.code("").nl();
                    output.code("return expect.promise.all(promises).caught(function () {").nl();
                    output.code("  return expect.promise.settle(promises).then(function () {").nl();
                    output.code("    expect.fail(function (output) {").nl();
                    output.code("      output.text('{').nl();").nl();
                    output.code("      output.indentLines();").nl();
                    output.code("      Object.keys(promises).forEach(function (key, index) {").nl();
                    output.code("        output.i().jsKey(key).text(':').sp();").nl();
                    output.code("        if (promises[key].isFulfilled()) {").nl();
                    output.code("          output.success('✓');").nl();
                    output.code("        } else {").nl();
                    output.code("          output.error('⨯ ').block(promises[key].reason().output);").nl();
                    output.code("        }").nl();
                    output.code("        output.nl();").nl();
                    output.code("      });").nl();
                    output.code("      output.outdentLines();").nl();
                    output.code("      output.text('}');").nl();
                    output.code("    });").nl();
                    output.code("  });").nl();
                    output.code("});").nl();
                    output.error("to throw");
                });
            });
        }).caught(function (e) {
            expect(e, "to have message",
                "{\n" +
                "  foo: ⨯ expected '42' to be a number after a short delay\n" +
                "  bar: ✓\n" +
                "  baz: ⨯ failed expectation in { a: '1', b: 2 }:\n" +
                "           a: expected '1' to be a number after a short delay\n" +
                "}"
            );
        }));

        return expect.promise.all(testPromises);
    });

    it("api/withError.md contains correct examples", function () {
        var testPromises = [];
        try {
            function Person(options) {
              this.name = options.name;
              this.gender = options.gender;
            }

            Person.prototype.genderSign = function () {
              switch (this.gender) {
              case 'female': return '♀';
              case 'male': return '♂';
              default: return '⚧';
              }
            };

            expect.addAssertion('to have same gender as', function (expect, subject, value) {
              expect.withError(function () {
                expect(subject.gender, 'to be', value.gender);
              }, function (e) {
                expect.fail({
                  diff: function (output) {
                    return {
                      inline: false,
                      diff: output.bold(subject.genderSign()).text(' ≠ ').bold(value.genderSign())
                    };
                  }
                });
              });
            });

            expect(new Person({ name: 'John Doe', gender: 'male' }),
                   'to have same gender as',
                   new Person({ name: 'Jane Doe', gender: 'female' }));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("function Person(options) {").nl();
                output.code("  this.name = options.name;").nl();
                output.code("  this.gender = options.gender;").nl();
                output.code("}").nl();
                output.code("").nl();
                output.code("Person.prototype.genderSign = function () {").nl();
                output.code("  switch (this.gender) {").nl();
                output.code("  case 'female': return '♀';").nl();
                output.code("  case 'male': return '♂';").nl();
                output.code("  default: return '⚧';").nl();
                output.code("  }").nl();
                output.code("};").nl();
                output.code("").nl();
                output.code("expect.addAssertion('to have same gender as', function (expect, subject, value) {").nl();
                output.code("  expect.withError(function () {").nl();
                output.code("    expect(subject.gender, 'to be', value.gender);").nl();
                output.code("  }, function (e) {").nl();
                output.code("    expect.fail({").nl();
                output.code("      diff: function (output) {").nl();
                output.code("        return {").nl();
                output.code("          inline: false,").nl();
                output.code("          diff: output.bold(subject.genderSign()).text(' ≠ ').bold(value.genderSign())").nl();
                output.code("        };").nl();
                output.code("      }").nl();
                output.code("    });").nl();
                output.code("  });").nl();
                output.code("});").nl();
                output.code("").nl();
                output.code("expect(new Person({ name: 'John Doe', gender: 'male' }),").nl();
                output.code("       'to have same gender as',").nl();
                output.code("       new Person({ name: 'Jane Doe', gender: 'female' }));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected Person({ name: 'John Doe', gender: 'male' }) to have same gender as Person({ name: 'Jane Doe', gender: 'female' })\n" +
                "\n" +
                "♂ ≠ ♀"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/Buffer/when-decoded-as.md contains correct examples", function () {
        var testPromises = [];
        if (!isBrowser) {
            expect(new Buffer([0xe2, 0x98, 0xba]), 'when decoded as', 'utf-8', 'to equal', '☺');
        }

        if (!isBrowser) {
            try {
                expect(new Buffer([0xe2, 0x98, 0xba]), 'when decoded as', 'utf-8', 'to equal', 'happy face');
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("expect(new Buffer([0xe2, 0x98, 0xba]), 'when decoded as', 'utf-8', 'to equal', 'happy face');").nl();
                    output.error("to throw");
                });
            } catch (e) {
                expect(e, "to have message",
                    "expected Buffer([0xE2, 0x98, 0xBA]) when decoded as 'utf-8' to equal 'happy face'\n" +
                    "\n" +
                    "-☺\n" +
                    "+happy face"
                );
            }
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/Error/to-have-message.md contains correct examples", function () {
        var testPromises = [];
        expect(new Error('foobar'), 'to have message', 'foobar');

        try {
            expect(new Error('foobar'), 'to have message', 'barfoo');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(new Error('foobar'), 'to have message', 'barfoo');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected Error({ message: 'foobar' }) to have message 'barfoo'\n" +
                "  expected 'foobar' to satisfy 'barfoo'\n" +
                "\n" +
                "  -foobar\n" +
                "  +barfoo"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be-a.md contains correct examples", function () {
        var testPromises = [];
        expect(true, 'to be a', 'boolean');
        expect(5, 'to be a', 'number');
        expect('abc', 'to be a', 'string');
        expect(expect, 'to be a', 'function');
        expect({foo: 123}, 'to be an', 'object');
        expect([123], 'to be an', 'array');
        expect(/regex/, 'to be a', 'regexp');
        expect(/regex/, 'to be a', 'regex');
        expect(/regex/, 'to be a', 'regular expression');
        expect(new Error(), 'to be an', 'Error');

        expect(expect, 'to be a', 'function');
        expect(expect, 'to be an', 'object');

        expect(true, 'to be a boolean');
        expect(5, 'to be a number');
        expect('abc', 'to be a string');
        expect(expect, 'to be a function');
        expect({foo: 123}, 'to be an object');
        expect([123], 'to be an array');
        expect(/regex/, 'to be a regexp');
        expect(/regex/, 'to be a regex');
        expect(/regex/, 'to be a regular expression');

        function Person(name) {
            this.name = name;
        }
        expect(new Person('John Doe'), 'to be a', Person);
        expect(new Person('John Doe'), 'to be an', Object);

        try {
            expect({ 0: 'foo', 1: 'bar', 2: 'baz' }, 'to be an array');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ 0: 'foo', 1: 'bar', 2: 'baz' }, 'to be an array');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { 0: 'foo', 1: 'bar', 2: 'baz' } to be an array"
            );
        }

        expect(true, 'not to be an object');
        expect('5', 'not to be a', 'number');
        expect('abc', 'not to be an', Object);

        try {
            expect(function () { return 'wat'; }, 'not to be an', Object);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(function () { return 'wat'; }, 'not to be an', Object);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected function () { return 'wat'; } not to be an Object"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be-defined.md contains correct examples", function () {
        var testPromises = [];
        expect('Hello world!', 'to be defined');
        expect({ foo: { bar: 'baz' } }, 'to be defined');

        try {
            expect(undefined, 'to be defined');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(undefined, 'to be defined');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected undefined to be defined"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be-falsy.md contains correct examples", function () {
        var testPromises = [];
        expect(0, 'to be falsy');
        expect(false, 'to be falsy');
        expect('', 'to be falsy');
        expect(undefined, 'to be falsy');
        expect(null, 'to be falsy');

        try {
            expect({}, 'to be falsy');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({}, 'to be falsy');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected {} to be falsy"
            );
        }

        expect(1, 'not to be falsy');
        expect(true, 'not to be falsy');
        expect({}, 'not to be falsy');
        expect('foo', 'not to be falsy');
        expect(/foo/, 'not to be falsy');

        try {
            expect('', 'not to be falsy');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('', 'not to be falsy');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected '' not to be falsy"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be-null.md contains correct examples", function () {
        var testPromises = [];
        expect(null, 'to be null');

        try {
            expect({ foo: { bar: 'baz' } }, 'to be null');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ foo: { bar: 'baz' } }, 'to be null');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { foo: { bar: 'baz' } } to be null"
            );
        }

        expect({ foo: { bar: 'baz' } }, 'not to be null');
        expect('Hello world!', 'not to be null');

        try {
            expect(null, 'not to be null');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(null, 'not to be null');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected null not to be null"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be-ok.md contains correct examples", function () {
        var testPromises = [];
        expect(1, 'to be ok');
        expect(true, 'to be ok');
        expect({}, 'to be ok');
        expect('foo', 'to be ok');
        expect(/foo/, 'to be ok');

        try {
            expect('', 'to be ok');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('', 'to be ok');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected '' to be ok"
            );
        }

        expect(0, 'not to be ok');
        expect(false, 'not to be ok');
        expect('', 'not to be ok');
        expect(undefined, 'not to be ok');
        expect(null, 'not to be ok');

        try {
            expect({}, 'not to be ok');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({}, 'not to be ok');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected {} not to be ok"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be-truthy.md contains correct examples", function () {
        var testPromises = [];
        expect(1, 'to be truthy');
        expect(true, 'to be truthy');
        expect({}, 'to be truthy');
        expect('foo', 'to be truthy');
        expect(/foo/, 'to be truthy');

        try {
            expect('', 'to be truthy');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('', 'to be truthy');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected '' to be truthy"
            );
        }

        expect(0, 'not to be truthy');
        expect(false, 'not to be truthy');
        expect('', 'not to be truthy');
        expect(undefined, 'not to be truthy');
        expect(null, 'not to be truthy');

        try {
            expect({}, 'not to be truthy');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({}, 'not to be truthy');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected {} not to be truthy"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be-undefined.md contains correct examples", function () {
        var testPromises = [];
        expect(undefined, 'to be undefined');

        try {
            expect('Hello world', 'to be undefined');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello world', 'to be undefined');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello world' to be undefined"
            );
        }

        expect('Hello world!', 'not to be undefined');
        expect({ foo: { bar: 'baz' } }, 'not to be undefined');

        try {
            expect(undefined, 'not to be undefined');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(undefined, 'not to be undefined');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected undefined not to be undefined"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-be.md contains correct examples", function () {
        var testPromises = [];
        var obj = {};
        expect(obj, 'to be', obj);
        expect(1, 'to be', 1);
        expect(null, 'to be', null);
        expect(undefined, 'to be', obj.foo);
        expect(true, 'to be', !false);

        expect(NaN, 'to be', NaN);
        expect(-0, 'not to be', 0);

        try {
            expect('1', 'to be', 1);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('1', 'to be', 1);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected '1' to be 1"
            );
        }

        expect({}, 'not to be', {});
        expect(1, 'not to be', true);
        expect('1', 'not to be', 1);
        expect(null, 'not to be', undefined);
        expect(0, 'not to be', 'null');
        expect(undefined, 'not to be', 'null');
        expect(false, 'not to be', 'true');
        expect(true, 'not to be', 'false');

        try {
            expect(1, 'not to be', 1);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(1, 'not to be', 1);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 1 not to be 1"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-equal.md contains correct examples", function () {
        var testPromises = [];
        expect({ a: 'b' }, 'to equal', { a: 'b' });
        var now = new Date();
        expect(now, 'to equal', now);
        expect(now, 'to equal', new Date(now.getTime()));
        expect({ now: now }, 'to equal', { now: now });

        try {
            expect({ text: 'foo!' }, 'to equal', { text: 'f00!' });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ text: 'foo!' }, 'to equal', { text: 'f00!' });").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { text: 'foo!' } to equal { text: 'f00!' }\n" +
                "\n" +
                "{\n" +
                "  text: 'foo!' // should equal 'f00!'\n" +
                "               // -foo!\n" +
                "               // +f00!\n" +
                "}"
            );
        }

        try {
            expect({ one: 1, two: 2, four: 4, five: 5 }, 'to equal', { one: 1, two: 2, three: 3, four: 4 });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ one: 1, two: 2, four: 4, five: 5 }, 'to equal', { one: 1, two: 2, three: 3, four: 4 });").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { one: 1, two: 2, four: 4, five: 5 } to equal { one: 1, two: 2, three: 3, four: 4 }\n" +
                "\n" +
                "{\n" +
                "  one: 1,\n" +
                "  two: 2,\n" +
                "  four: 4,\n" +
                "  five: 5, // should be removed\n" +
                "  three: undefined // should equal 3\n" +
                "}"
            );
        }

        try {
            expect([ 0, 1, 2, 4, 5], 'to equal', [ 1, 2, 3, 4]);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([ 0, 1, 2, 4, 5], 'to equal', [ 1, 2, 3, 4]);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 0, 1, 2, 4, 5 ] to equal [ 1, 2, 3, 4 ]\n" +
                "\n" +
                "[\n" +
                "  0, // should be removed\n" +
                "  1,\n" +
                "  2,\n" +
                "  // missing 3\n" +
                "  4,\n" +
                "  5 // should be removed\n" +
                "]"
            );
        }

        if (!isBrowser) {
            try {
                expect(
                    new Buffer('\x00\x01\x02Here is the thing I was talking about', 'utf-8'),
                    'to equal',
                    new Buffer('\x00\x01\x02Here is the thing I was quuxing about', 'utf-8')
                );
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("expect(").nl();
                    output.code("    new Buffer('\\x00\\x01\\x02Here is the thing I was talking about', 'utf-8'),").nl();
                    output.code("    'to equal',").nl();
                    output.code("    new Buffer('\\x00\\x01\\x02Here is the thing I was quuxing about', 'utf-8')").nl();
                    output.code(");").nl();
                    output.error("to throw");
                });
            } catch (e) {
                expect(e, "to have message",
                    "expected Buffer([0x00, 0x01, 0x02, 0x48, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74 /* 24 more */ ])\n" +
                    "to equal Buffer([0x00, 0x01, 0x02, 0x48, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74 /* 24 more */ ])\n" +
                    "\n" +
                    " 00 01 02 48 65 72 65 20 69 73 20 74 68 65 20 74  │...Here is the t│\n" +
                    "-68 69 6E 67 20 49 20 77 61 73 20 74 61 6C 6B 69  │hing I was talki│\n" +
                    "+68 69 6E 67 20 49 20 77 61 73 20 71 75 75 78 69  │hing I was quuxi│\n" +
                    " 6E 67 20 61 62 6F 75 74                          │ng about│"
                );
            }
        }

        expect(1, 'not to equal', '1');
        expect({ one: 1 }, 'not to equal', { one: '1' });
        expect(null, 'not to equal', '1');
        var now = new Date();
        var later = new Date(now.getTime() + 42);
        expect(now, 'not to equal', later);
        expect({ time: now }, 'not to equal', { time: later });

        try {
            expect({ a: { b: 'd'} }, 'not to equal', { a: { b: 'd'} });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ a: { b: 'd'} }, 'not to equal', { a: { b: 'd'} });").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { a: { b: 'd' } } not to equal { a: { b: 'd' } }"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/to-satisfy.md contains correct examples", function () {
        var testPromises = [];
        expect({ hey: { there: true } }, 'to satisfy', { hey: {} });

        expect({ hey: { there: true } }, 'to exhaustively satisfy', { hey: { there: true } });

        expect({ bar: 'quux', baz: true }, 'to satisfy', { bar: /QU*X/i });

        expect({foo: 123, bar: 'bar', baz: 'bogus', qux: 42, quux: 'wat'}, 'to satisfy', {
            foo: expect.it('to be a number').and('to be greater than', 10),
            baz: expect.it('not to match', /^boh/),
            qux: expect.it('to be a string')
                          .and('not to be empty')
                       .or('to be a number')
                          .and('to be positive'),
            quux: function (value) {
              expect(value, 'to be a string');
            }
        });

        try {
            expect({foo: 9, bar: 'bar', baz: 'bogus', qux: 42, quux: 'wat'}, 'to satisfy', {
                foo: expect.it('to be a number').and('to be greater than', 10),
                baz: expect.it('not to match', /^bog/),
                qux: expect.it('to be a string')
                              .and('not to be empty')
                           .or('to be a number')
                              .and('to be positive'),
                quux: function (value) {
                  expect(value, 'to be a number');
                }
            });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({foo: 9, bar: 'bar', baz: 'bogus', qux: 42, quux: 'wat'}, 'to satisfy', {").nl();
                output.code("    foo: expect.it('to be a number').and('to be greater than', 10),").nl();
                output.code("    baz: expect.it('not to match', /^bog/),").nl();
                output.code("    qux: expect.it('to be a string')").nl();
                output.code("                  .and('not to be empty')").nl();
                output.code("               .or('to be a number')").nl();
                output.code("                  .and('to be positive'),").nl();
                output.code("    quux: function (value) {").nl();
                output.code("      expect(value, 'to be a number');").nl();
                output.code("    }").nl();
                output.code("});").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { foo: 9, bar: 'bar', baz: 'bogus', qux: 42, quux: 'wat' } to satisfy\n" +
                "{\n" +
                "  foo: expect.it('to be a number')\n" +
                "               .and('to be greater than', 10),\n" +
                "  baz: expect.it('not to match', /^bog/),\n" +
                "  qux: expect.it('to be a string')\n" +
                "               .and('not to be empty')\n" +
                "             .or('to be a number')\n" +
                "               .and('to be positive'),\n" +
                "  quux: function (value) {\n" +
                "    expect(value, 'to be a number');\n" +
                "  }\n" +
                "}\n" +
                "\n" +
                "{\n" +
                "  foo: 9, // ✓ expected 9 to be a number and\n" +
                "          // ⨯ expected 9 to be greater than 10\n" +
                "  bar: 'bar',\n" +
                "  baz: 'bogus', // expected 'bogus' not to match /^bog/\n" +
                "                //\n" +
                "                // bogus\n" +
                "  qux: 42,\n" +
                "  quux: 'wat' // expected 'wat' to be a number\n" +
                "}"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/any/when-passed-as-parameter-to.md contains correct examples", function () {
        var testPromises = [];
        function increment(n) {
            return n + 1;
        }

        expect(1, 'when passed as parameter to', increment, 'to equal', 2);

        try {
            expect(1, 'when passed as parameter to', increment, 'to equal', 3);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(1, 'when passed as parameter to', increment, 'to equal', 3);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1 ] when passed as parameters to\n" +
                "function increment(n) {\n" +
                "    return n + 1;\n" +
                "} to equal 3\n" +
                "  expected 2 to equal 3"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/array-like/to-be-empty.md contains correct examples", function () {
        var testPromises = [];
        expect([], 'to be empty');

        try {
            expect([1,2,3], 'to be empty');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([1,2,3], 'to be empty');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1, 2, 3 ] to be empty"
            );
        }

        expect([1,2,3], 'not to be empty');

        try {
            expect([], 'not to be empty');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([], 'not to be empty');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [] not to be empty"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/array-like/to-be-non-empty.md contains correct examples", function () {
        var testPromises = [];
        expect([1, 2, 3], 'to be non-empty');

        try {
            expect([], 'to be non-empty');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([], 'to be non-empty');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [] to be non-empty"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/array-like/to-contain.md contains correct examples", function () {
        var testPromises = [];
        expect([0, 1, 2], 'to contain', 1);
        expect([ { name: 'John Doe' }, { name: 'Jane Doe' } ], 'to contain', { name: 'Jane Doe' });
        expect([0, 1, 2], 'to contain', 0, 2);

        try {
            expect([ { name: 'John Doe' }, { name: 'Jane Doe' } ], 'to contain', { name: 'Jonnie Doe' });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([ { name: 'John Doe' }, { name: 'Jane Doe' } ], 'to contain', { name: 'Jonnie Doe' });").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ { name: 'John Doe' }, { name: 'Jane Doe' } ] to contain { name: 'Jonnie Doe' }"
            );
        }

        expect([ { name: 'John Doe' }, { name: 'Jane Doe' } ], 'not to contain', { name: 'Jonnie Doe' });

        try {
            expect([ { name: 'John Doe' }, { name: 'Jane Doe' } ], 'not to contain', { name: 'Jane Doe' });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([ { name: 'John Doe' }, { name: 'Jane Doe' } ], 'not to contain', { name: 'Jane Doe' });").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ { name: 'John Doe' }, { name: 'Jane Doe' } ] not to contain { name: 'Jane Doe' }\n" +
                "\n" +
                "[\n" +
                "  { name: 'John Doe' },\n" +
                "  { name: 'Jane Doe' } // should be removed\n" +
                "]"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/array-like/to-have-items-satisfying.md contains correct examples", function () {
        var testPromises = [];
        expect([0, 1, 2, 3, 4], 'to have items satisfying', function (item, index) {
            expect(item, 'to be a number');
        });

        expect([0, 1, 2, 3, 4], 'to have items satisfying', 'to be a number');

        expect([[1], [2]], 'to have items satisfying',
               'to have items satisfying', 'to be a number');

        expect([1, 2, 3, 4], 'to have items satisfying',
          expect.it('to be a number').and('to be positive'));

        try {
            expect([ [0, 1, 2], [4, '5', '6'], [7, '8', 9] ],
              'to have items satisfying',
              'to have items satisfying',
              'to be a number');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([ [0, 1, 2], [4, '5', '6'], [7, '8', 9] ],").nl();
                output.code("  'to have items satisfying',").nl();
                output.code("  'to have items satisfying',").nl();
                output.code("  'to be a number');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "failed expectation in [ [ 0, 1, 2 ], [ 4, '5', '6' ], [ 7, '8', 9 ] ]:\n" +
                "  1: failed expectation in [ 4, '5', '6' ]:\n" +
                "       1: expected '5' to be a number\n" +
                "       2: expected '6' to be a number\n" +
                "  2: failed expectation in [ 7, '8', 9 ]:\n" +
                "       1: expected '8' to be a number"
            );
        }

        try {
            expect([0, 1, 2, 3, 4], 'to have items satisfying',
              expect.it('to be a number').and('to be positive'));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([0, 1, 2, 3, 4], 'to have items satisfying',").nl();
                output.code("  expect.it('to be a number').and('to be positive'));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "failed expectation in [ 0, 1, 2, 3, 4 ]:\n" +
                "  0: ✓ expected 0 to be a number and\n" +
                "     ⨯ expected 0 to be positive"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/array-like/to-have-length.md contains correct examples", function () {
        var testPromises = [];
        expect([1,2,3], 'to have length', 3);

        try {
            expect([1,2,3], 'to have length', 4);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([1,2,3], 'to have length', 4);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1, 2, 3 ] to have length 4\n" +
                "  expected 3 to be 4"
            );
        }

        expect([1,2,3], 'not to have length', 4);

        try {
            expect([1,2,3], 'not to have length', 3);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([1,2,3], 'not to have length', 3);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1, 2, 3 ] not to have length 3"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/array-like/when-passed-as-parameters-to.md contains correct examples", function () {
        var testPromises = [];
        function add(a, b) {
            return a + b;
        }

        expect([1, 2], 'when passed as parameters to', add, 'to equal', 3);

        try {
            expect([1, 2], 'when passed as parameters to', add, 'to equal', 9);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([1, 2], 'when passed as parameters to', add, 'to equal', 9);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 1, 2 ] when passed as parameters to\n" +
                "function add(a, b) {\n" +
                "    return a + b;\n" +
                "} to equal 9\n" +
                "  expected 3 to equal 9"
            );
        }

        testPromises.push(expect.promise(function () {
            function delayedAdd(a, b, cb) {
                setTimeout(function () {
                    cb(null, a + b);
                }, 1);
            }

            return expect([1, 2], 'when passed as parameters to async', delayedAdd, 'to equal', 3);
        }));

        function Foo(value) {
            this.value = value;
        }

        expect(123, 'when passed as parameter to constructor', Foo, 'to be a', Foo);
        return expect.promise.all(testPromises);
    });

    it("assertions/boolean/to-be-false.md contains correct examples", function () {
        var testPromises = [];
        expect(false, 'to be false');

        try {
            expect(true, 'to be false');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(true, 'to be false');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected true to be false"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/boolean/to-be-true.md contains correct examples", function () {
        var testPromises = [];
        expect(true, 'to be true');

        try {
            expect(false, 'to be true');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(false, 'to be true');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected false to be true"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/function/to-have-arity.md contains correct examples", function () {
        var testPromises = [];
        expect(Math.max, 'to have arity', 2);
        expect('wat'.substring, 'to have arity', 2);

        try {
            expect(function wat(foo, bar) {
              return foo + bar;
            }, 'to have arity', 3);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(function wat(foo, bar) {").nl();
                output.code("  return foo + bar;").nl();
                output.code("}, 'to have arity', 3);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected\n" +
                "function wat(foo, bar) {\n" +
                "  return foo + bar;\n" +
                "}\n" +
                "to have arity 3"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/function/to-throw.md contains correct examples", function () {
        var testPromises = [];
        function willThrow() {
          throw new Error('The error message');
        }
        expect(willThrow, 'to throw');
        expect(willThrow, 'to throw error');
        expect(willThrow, 'to throw exception');

        try {
            expect(function willNotThrow() {}, 'to throw');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(function willNotThrow() {}, 'to throw');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected function willNotThrow() {} to throw"
            );
        }

        expect(function () {
          throw new Error('The error message');
        }, 'to throw', 'The error message');

        if (!isPhantom) {
            try {
                expect(function () {
                  throw new Error('The error message!');
                }, 'to throw', 'The error message');
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("expect(function () {").nl();
                    output.code("  throw new Error('The error message!');").nl();
                    output.code("}, 'to throw', 'The error message');").nl();
                    output.error("to throw");
                });
            } catch (e) {
                expect(e, "to have message",
                    "expected\n" +
                    "function () {\n" +
                    "  throw new Error('The error message!');\n" +
                    "}\n" +
                    "to throw 'The error message'\n" +
                    "  expected Error({ message: 'The error message!' }) to satisfy 'The error message'\n" +
                    "\n" +
                    "  -The error message!\n" +
                    "  +The error message"
                );
            }
        }

        expect(function () {
          throw new Error('The error message');
        }, 'to throw', /error message/);

        if (!isPhantom) {
            try {
                expect(function () {
                  throw new Error('The error message!');
                }, 'to throw', /catastrophic failure/);
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("expect(function () {").nl();
                    output.code("  throw new Error('The error message!');").nl();
                    output.code("}, 'to throw', /catastrophic failure/);").nl();
                    output.error("to throw");
                });
            } catch (e) {
                expect(e, "to have message",
                    "expected\n" +
                    "function () {\n" +
                    "  throw new Error('The error message!');\n" +
                    "}\n" +
                    "to throw /catastrophic failure/\n" +
                    "  expected Error({ message: 'The error message!' }) to satisfy /catastrophic failure/"
                );
            }
        }

        expect(function () {
          this.foo.bar();
        }, 'to throw', function (e) {
          expect(e, 'to be a', TypeError);
        });

        if (!isPhantom) {
            try {
                expect(function () {
                  throw new Error('Another error');
                }, 'to throw', function (e) {
                  expect(e, 'to be a', TypeError);
                });
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("expect(function () {").nl();
                    output.code("  throw new Error('Another error');").nl();
                    output.code("}, 'to throw', function (e) {").nl();
                    output.code("  expect(e, 'to be a', TypeError);").nl();
                    output.code("});").nl();
                    output.error("to throw");
                });
            } catch (e) {
                expect(e, "to have message",
                    "expected\n" +
                    "function () {\n" +
                    "  throw new Error('Another error');\n" +
                    "}\n" +
                    "to throw\n" +
                    "function (e) {\n" +
                    "  expect(e, 'to be a', TypeError);\n" +
                    "}\n" +
                    "  expected Error({ message: 'Another error' }) to be a TypeError"
                );
            }
        }

        expect(function () {
          throw new TypeError('Invalid syntax');
        }, 'to throw', new TypeError('Invalid syntax'));

        if (!isPhantom) {
            try {
                expect(function () {
                  throw new Error('Another error');
                }, 'to throw', new TypeError('Invalid syntax'));
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("expect(function () {").nl();
                    output.code("  throw new Error('Another error');").nl();
                    output.code("}, 'to throw', new TypeError('Invalid syntax'));").nl();
                    output.error("to throw");
                });
            } catch (e) {
                expect(e, "to have message",
                    "expected\n" +
                    "function () {\n" +
                    "  throw new Error('Another error');\n" +
                    "}\n" +
                    "to throw TypeError({ message: 'Invalid syntax' })\n" +
                    "  expected Error({ message: 'Another error' }) to satisfy TypeError({ message: 'Invalid syntax' })"
                );
            }
        }

        expect(function () {
          // Do some work that should not throw
        }, 'not to throw');

        if (!isPhantom) {
            try {
                expect(function () {
                  throw new Error('threw anyway');
                }, 'not to throw');
                expect.fail(function (output) {
                    output.error("expected:").nl();
                    output.code("expect(function () {").nl();
                    output.code("  throw new Error('threw anyway');").nl();
                    output.code("}, 'not to throw');").nl();
                    output.error("to throw");
                });
            } catch (e) {
                expect(e, "to have message",
                    "expected\n" +
                    "function () {\n" +
                    "  throw new Error('threw anyway');\n" +
                    "}\n" +
                    "not to throw\n" +
                    "  threw: Error({ message: 'threw anyway' })"
                );
            }
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-NaN.md contains correct examples", function () {
        var testPromises = [];
        expect(NaN, 'to be NaN');

        try {
            expect(2, 'to be NaN');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(2, 'to be NaN');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 2 to be NaN"
            );
        }

        expect(2, 'not to be NaN');

        try {
            expect(NaN, 'not to be NaN');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(NaN, 'not to be NaN');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected NaN not to be NaN"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-close-to.md contains correct examples", function () {
        var testPromises = [];
        expect(1.5, 'to be close to', 1.500001, 1e-5);
        expect(1.5, 'to be close to', 1.5000000001)

        try {
            expect(1.5, 'to be close to', 1.50001, 1e-5);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(1.5, 'to be close to', 1.50001, 1e-5);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 1.5 to be close to 1.50001 (epsilon: 1e-5)"
            );
        }

        expect(1.5, 'not to be close to', 1.499, 1e-4);

        try {
            expect(1.5, 'not to be close to', 1.5000000001)
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(1.5, 'not to be close to', 1.5000000001)").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 1.5 not to be close to 1.5000000001 (epsilon: 1e-9)"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-finite.md contains correct examples", function () {
        var testPromises = [];
        expect(123, 'to be finite');

        try {
            expect(Infinity, 'to be finite');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(Infinity, 'to be finite');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected Infinity to be finite"
            );
        }

        expect(Infinity, 'not to be finite');
        expect(-Infinity, 'not to be finite');

        try {
            expect(123, 'not to be finite');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(123, 'not to be finite');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 123 not to be finite"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-greater-than-or-equal-to.md contains correct examples", function () {
        var testPromises = [];
        expect(3, 'to be greater than or equal to', 3);
        expect(4, 'to be >=', 3);
        expect(4, '>=', 4);

        try {
            expect(1, 'to be greater than or equal to', 2);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(1, 'to be greater than or equal to', 2);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 1 to be greater than or equal to 2"
            );
        }

        expect(1, 'not to be greater than or equal to', 2);
        expect(3, 'not to be >=', 4);

        try {
            expect(2, 'not to be greater than or equal to', 2);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(2, 'not to be greater than or equal to', 2);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 2 not to be greater than or equal to 2"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-greater-than.md contains correct examples", function () {
        var testPromises = [];
        expect(3, 'to be greater than', 2);
        expect(1, 'to be above', 0);
        expect(4, 'to be >', 3);
        expect(4, '>', 3);

        try {
            expect(2, 'to be greater than', 2);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(2, 'to be greater than', 2);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 2 to be greater than 2"
            );
        }

        expect(2, 'not to be greater than', 2);
        expect(0, 'not to be above', 1);
        expect(3, 'not to be >', 4);

        try {
            expect(3, 'not to be greater than', 2);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(3, 'not to be greater than', 2);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 3 not to be greater than 2"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-infinite.md contains correct examples", function () {
        var testPromises = [];
        expect(Infinity, 'to be infinite');
        expect(-Infinity, 'to be infinite');

        try {
            expect(123, 'to be infinite');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(123, 'to be infinite');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 123 to be infinite"
            );
        }

        expect(123, 'not to be infinite');

        try {
            expect(Infinity, 'not to be infinite');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(Infinity, 'not to be infinite');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected Infinity not to be infinite"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-less-than-or-equal-to.md contains correct examples", function () {
        var testPromises = [];
        expect(3, 'to be less than or equal to', 3);
        expect(3, 'to be <=', 4);
        expect(4, '<=', 4);

        try {
            expect(2, 'to be less than or equal to', 1);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(2, 'to be less than or equal to', 1);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 2 to be less than or equal to 1"
            );
        }

        expect(2, 'not to be less than or equal to', 1);
        expect(4, 'not to be <=', 3);

        try {
            expect(2, 'not to be less than or equal to', 2);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(2, 'not to be less than or equal to', 2);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 2 not to be less than or equal to 2"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-less-than.md contains correct examples", function () {
        var testPromises = [];
        expect(2, 'to be less than', 3);
        expect(0, 'to be below', 1);
        expect(3, 'to be <', 4);
        expect(3, '<', 4);

        try {
            expect(2, 'to be less than', 2);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(2, 'to be less than', 2);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 2 to be less than 2"
            );
        }

        expect(2, 'not to be less than', 2);
        expect(1, 'not to be below', 0);
        expect(4, 'not to be <', 3);

        try {
            expect(2, 'not to be less than', 3);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(2, 'not to be less than', 3);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 2 not to be less than 3"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-negative.md contains correct examples", function () {
        var testPromises = [];
        expect(-42, 'to be negative');

        try {
            expect(0, 'to be negative');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(0, 'to be negative');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 0 to be negative"
            );
        }

        expect(0, 'not to be negative');
        expect(42, 'not to be negative');

        try {
            expect(-1, 'not to be negative');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(-1, 'not to be negative');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected -1 not to be negative"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-positive.md contains correct examples", function () {
        var testPromises = [];
        expect(42, 'to be positive');

        try {
            expect(0, 'to be positive');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(0, 'to be positive');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 0 to be positive"
            );
        }

        expect(0, 'not to be positive');
        expect(-42, 'not to be positive');

        try {
            expect(1, 'not to be positive');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(1, 'not to be positive');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 1 not to be positive"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/number/to-be-within.md contains correct examples", function () {
        var testPromises = [];
        expect(0, 'to be within', 0, 4);
        expect(1, 'to be within', 0, 4);
        expect(2.5, 'to be within', 0, 4);
        expect(4, 'to be within', 0, 4);

        try {
            expect(-1, 'to be within', 0, 4);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(-1, 'to be within', 0, 4);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected -1 to be within 0..4"
            );
        }

        expect(-1, 'not to be within', 0, 4);
        expect(5, 'not to be within', 0, 4);

        try {
            expect(0, 'not to be within', 0, 4);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(0, 'not to be within', 0, 4);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 0 not to be within 0..4"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/object/to-be-canonical.md contains correct examples", function () {
        var testPromises = [];
        expect({ a: 123, b: 456 }, 'to be canonical');
        expect([456, { a: 123 }], 'to be canonical');

        try {
            expect([456, { b: 456, a: 123 }], 'to be canonical');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect([456, { b: 456, a: 123 }], 'to be canonical');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected [ 456, { b: 456, a: 123 } ] to be canonical"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/object/to-have-key.md contains correct examples", function () {
        var testPromises = [];
        expect({ a: 'a', b: 'b', c: 'c' }, 'to have key', 'a');

        expect({ a: 'a' }, 'to only have key', 'a');

        try {
            expect({ a: 'a', b: 'b' }, 'to have key', 'c');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ a: 'a', b: 'b' }, 'to have key', 'c');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { a: 'a', b: 'b' } to have key 'c'"
            );
        }

        expect({ a: 'a', b: 'b' }, 'not to have key', 'c');
        expect(Object.create({ a: 'a', b: 'b' }), 'not to have key', 'a');

        expect({ a: 'a', b: 'b' }, 'to not only have key', 'a');

        try {
            expect({ a: 'a', b: 'b' }, 'to not have key', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ a: 'a', b: 'b' }, 'to not have key', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { a: 'a', b: 'b' } to not have key 'a'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/object/to-have-keys-satisfying.md contains correct examples", function () {
        var testPromises = [];
        expect({ foo: 0, bar: 1, baz: 2, qux: 3 },
               'to have keys satisfying', function (key, value) {
            expect(key, 'to match', /^[a-z]{3}$/);
        });

        expect({ foo: 0, bar: 1, baz: 2, qux: 3 },
               'to have keys satisfying',
               'to match', /^[a-z]{3}$/);

        try {
            expect({ foo: 0, bar: 1, baz: 2, qux: 3, quux: 4 },
                   'to have keys satisfying',
                   'to match', /^[a-z]{3}$/);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ foo: 0, bar: 1, baz: 2, qux: 3, quux: 4 },").nl();
                output.code("       'to have keys satisfying',").nl();
                output.code("       'to match', /^[a-z]{3}$/);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "failed expectation on keys foo, bar, baz, qux, quux:\n" +
                "  quux: expected 'quux' to match /^[a-z]{3}$/"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/object/to-have-keys.md contains correct examples", function () {
        var testPromises = [];
        expect({ a: 'a', b: 'b', c: 'c' }, 'to have keys', 'a', 'c');
        expect({ a: 'a', b: 'b', c: 'c' }, 'to have keys', ['a', 'c']);

        expect({ a: 'a', b: 'b', c: 'c' }, 'to only have keys', ['a', 'c', 'b']);

        try {
            expect({ a: 'a', b: 'b', c: 'c' }, 'to have keys', 'c', 'd');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ a: 'a', b: 'b', c: 'c' }, 'to have keys', 'c', 'd');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { a: 'a', b: 'b', c: 'c' } to have keys 'c', 'd'"
            );
        }

        expect({ a: 'a', b: 'b', c: 'c' }, 'not to have keys', 'd', 'e');
        expect(Object.create({ a: 'a', b: 'b', c: 'c' }), 'not to have keys', 'a', 'b');

        expect({ a: 'a', b: 'b', c: 'c' }, 'to not only have keys', 'a', 'b');

        try {
            expect({ a: 'a', b: 'b', c: 'c' }, 'to not only have keys', 'a', 'b', 'c');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ a: 'a', b: 'b', c: 'c' }, 'to not only have keys', 'a', 'b', 'c');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { a: 'a', b: 'b', c: 'c' } to not only have keys 'a', 'b', 'c'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/object/to-have-properties.md contains correct examples", function () {
        var testPromises = [];
        expect({ a: 'a', b: { c: 'c' }, d: 'd' }, 'to have properties', ['a', 'b']);
        expect({ a: 'a', b: { c: 'c' }, d: 'd' }, 'to have properties', {
            a: 'a',
            b: { c: 'c' }
        });
        expect([ 'a', { c: 'c' }, 'd' ], 'to have properties', {
            1: { c: 'c' },
            2: 'd'
        });

        expect({ a: 'a', b: { c: 'c' }, d: 'd' }, 'to have own properties', ['a', 'b']);
        expect({ a: 'a', b: { c: 'c' }, d: 'd' }, 'to have own properties', {
            a: 'a',
            b: { c: 'c' }
        });

        try {
            expect({ a: 'f00', b: 'bar' }, 'to have own properties', {
              a: 'foo',
              c: 'baz'
            });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ a: 'f00', b: 'bar' }, 'to have own properties', {").nl();
                output.code("  a: 'foo',").nl();
                output.code("  c: 'baz'").nl();
                output.code("});").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { a: 'f00', b: 'bar' } to have own properties { a: 'foo', c: 'baz' }\n" +
                "\n" +
                "{\n" +
                "  a: 'f00', // should equal 'foo'\n" +
                "            // -f00\n" +
                "            // +foo\n" +
                "  b: 'bar',\n" +
                "  c: undefined // should equal 'baz'\n" +
                "}"
            );
        }

        expect({ a: 'a', b: { c: 'c' }, d: 'd' }, 'not to have properties', ['k', 'l']);
        expect(Object.create({ a: 'a', b: 'b' }), 'not to have own properties', ['a', 'b']);

        try {
            expect({ a: 'a', b: { c: 'c' }, d: 'd' }, 'not to have properties', ['b', 'd']);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ a: 'a', b: { c: 'c' }, d: 'd' }, 'not to have properties', ['b', 'd']);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { a: 'a', b: { c: 'c' }, d: 'd' } not to have properties [ 'b', 'd' ]"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/object/to-have-property.md contains correct examples", function () {
        var testPromises = [];
        expect([1, 2], 'to have property', 'length');
        expect({ a: 'b' }, 'to have property', 'a');
        expect({ a: 'b' }, 'to have property', 'toString');

        expect([1, 2], 'to have property', 'length', 2);
        expect({ a: 'b' }, 'to have property', 'a', 'b');
        expect({ a: { b: 'c' } }, 'to have property', 'a', { b: 'c' });

        expect({ a: 'b' }, 'to have own property', 'a');
        expect({ a: 'b' }, 'to have own property', 'a', 'b');

        try {
            expect(Object.create({ a: 'b' }), 'to have own property', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect(Object.create({ a: 'b' }), 'to have own property', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected {} to have own property 'a'"
            );
        }

        expect({ a: 'b' }, 'not to have property', 'b');
        expect(Object.create({ a: 'b' }), 'not to have own property', 'a');
        return expect.promise.all(testPromises);
    });

    it("assertions/object/to-have-values-satisfying.md contains correct examples", function () {
        var testPromises = [];
        expect({ foo: 0, bar: 1, baz: 2, qux: 3 },
               'to have values satisfying', function (value, index) {
            expect(value, 'to be a number');
        });

        expect({ foo: 0, bar: 1, baz: 2, qux: 3 },
               'to have values satisfying',
               'to be a number');

        try {
            expect({ foo: [0, 1, 2], bar: [4, 5, 6], baz: [7, 8, 9] },
                   'to have values satisfying',
                   'to have items satisfying',
                   expect.it('to be a number').and('to be below', 8));
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ foo: [0, 1, 2], bar: [4, 5, 6], baz: [7, 8, 9] },").nl();
                output.code("       'to have values satisfying',").nl();
                output.code("       'to have items satisfying',").nl();
                output.code("       expect.it('to be a number').and('to be below', 8));").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "failed expectation in { foo: [ 0, 1, 2 ], bar: [ 4, 5, 6 ], baz: [ 7, 8, 9 ] }:\n" +
                "  baz: failed expectation in [ 7, 8, 9 ]:\n" +
                "         1: ✓ expected 8 to be a number and\n" +
                "            ⨯ expected 8 to be below 8\n" +
                "         2: ✓ expected 9 to be a number and\n" +
                "            ⨯ expected 9 to be below 8"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be-empty.md contains correct examples", function () {
        var testPromises = [];
        expect('', 'to be empty');

        try {
            expect('Hello world', 'to be empty');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello world', 'to be empty');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello world' to be empty"
            );
        }

        expect('Hello world', 'not to be empty');

        try {
            expect('', 'not to be empty');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('', 'not to be empty');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected '' not to be empty"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be-greater-than-or-equal-to.md contains correct examples", function () {
        var testPromises = [];
        expect('b', 'to be greater than or equal to', 'b');
        expect('c', 'to be >=', 'b');
        expect('c', '>=', 'c');

        try {
            expect('a', 'to be greater than or equal to', 'b');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('a', 'to be greater than or equal to', 'b');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'a' to be greater than or equal to 'b'"
            );
        }

        expect('a', 'not to be greater than or equal to', 'b');
        expect('b', 'not to be >=', 'c');

        try {
            expect('a', 'not to be greater than or equal to', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('a', 'not to be greater than or equal to', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'a' not to be greater than or equal to 'a'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be-greater-than.md contains correct examples", function () {
        var testPromises = [];
        expect('b', 'to be greater than', 'a');
        expect('b', 'to be above', 'a');
        expect('b', 'to be >', 'a');
        expect('b', '>', 'a');

        try {
            expect('a', 'to be greater than', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('a', 'to be greater than', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'a' to be greater than 'a'"
            );
        }

        expect('a', 'not to be greater than', 'a');
        expect('a', 'not to be above', 'a');
        expect('a', 'not to be >', 'a');

        try {
            expect('b', 'not to be above', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('b', 'not to be above', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'b' not to be above 'a'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be-less-than-or-equal-to.md contains correct examples", function () {
        var testPromises = [];
        expect('b', 'to be less than or equal to', 'b');
        expect('b', 'to be <=', 'c');
        expect('c', '<=', 'c');

        try {
            expect('b', 'to be less than or equal to', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('b', 'to be less than or equal to', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'b' to be less than or equal to 'a'"
            );
        }

        expect('b', 'not to be less than or equal to', 'a');
        expect('c', 'not to be <=', 'b');

        try {
            expect('a', 'not to be less than or equal to', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('a', 'not to be less than or equal to', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'a' not to be less than or equal to 'a'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be-less-than.md contains correct examples", function () {
        var testPromises = [];
        expect('a', 'to be less than', 'b');
        expect('a', 'to be below', 'b');
        expect('a', 'to be <', 'b');
        expect('a', '<', 'b');

        try {
            expect('a', 'to be less than', 'a');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('a', 'to be less than', 'a');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'a' to be less than 'a'"
            );
        }

        expect('a', 'not to be less than', 'a');
        expect('a', 'not to be below', 'a');
        expect('a', 'not to be <', 'a');

        try {
            expect('a', 'not to be below', 'b');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('a', 'not to be below', 'b');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'a' not to be below 'b'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be-non-empty.md contains correct examples", function () {
        var testPromises = [];
        expect('Hello', 'to be non-empty');

        try {
            expect('', 'to be non-empty');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('', 'to be non-empty');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected '' to be non-empty"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be-within.md contains correct examples", function () {
        var testPromises = [];
        expect('a', 'to be within', 'a', 'd');
        expect('b', 'to be within', 'a', 'd');
        expect('aabbcc', 'to be within', 'aaa', 'aaz');

        try {
            expect('abbbcc', 'to be within', 'aaa', 'aaz');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('abbbcc', 'to be within', 'aaa', 'aaz');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'abbbcc' to be within 'aaa'..'aaz'"
            );
        }

        expect('bar', 'not to be within', 'foo', 'baz');
        expect('e', 'not to be within', 'a', 'd');
        expect('abbbcc', 'not to be within', 'aaa', 'aaz');

        try {
            expect('c', 'not to be within', 'a', 'd');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('c', 'not to be within', 'a', 'd');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'c' not to be within 'a'..'d'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-be.md contains correct examples", function () {
        var testPromises = [];
        expect('Hello', 'to be', 'Hello');

        try {
            expect('Hello beautiful!', 'to be', 'Hello world!');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello beautiful!', 'to be', 'Hello world!');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello beautiful!' to be 'Hello world!'\n" +
                "\n" +
                "-Hello beautiful!\n" +
                "+Hello world!"
            );
        }

        expect('Hello', 'not to be', 'Hello world!');
        expect('1', 'not to be', 1);

        try {
            expect('Hello world!', 'not to be', 'Hello world!');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello world!', 'not to be', 'Hello world!');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello world!' not to be 'Hello world!'"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-contain.md contains correct examples", function () {
        var testPromises = [];
        expect('Hello beautiful world!', 'to contain', 'beautiful');
        expect('Hello beautiful world!', 'to contain', 'Hello', 'world');

        try {
            expect('Hello world!', 'to contain', 'beautiful');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello world!', 'to contain', 'beautiful');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello world!' to contain 'beautiful'"
            );
        }

        expect('Hello world!', 'not to contain', 'beautiful', 'ugly');

        try {
            expect('Hello beautiful world!', 'not to contain', 'beautiful', 'ugly');
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello beautiful world!', 'not to contain', 'beautiful', 'ugly');").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello beautiful world!' not to contain 'beautiful', 'ugly'\n" +
                "\n" +
                "Hello beautiful world!"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-have-length.md contains correct examples", function () {
        var testPromises = [];
        expect('Hello world', 'to have length', 11);

        try {
            expect('Hello world', 'to have length', 12);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello world', 'to have length', 12);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello world' to have length 12\n" +
                "  expected 11 to be 12"
            );
        }

        expect('Hello world', 'not to have length', 12);

        try {
            expect('Hello world', 'not to have length', 11);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello world', 'not to have length', 11);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello world' not to have length 11"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("assertions/string/to-match.md contains correct examples", function () {
        var testPromises = [];
        expect('Hello beautiful world!', 'to match', /bea.t.*/);

        try {
            expect('Hello world!', 'to match', /beautiful/);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello world!', 'to match', /beautiful/);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello world!' to match /beautiful/"
            );
        }

        expect('Hello world!', 'not to match', /beautiful/);

        try {
            expect('Hello beautiful world!', 'not to match', /beautiful/);
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect('Hello beautiful world!', 'not to match', /beautiful/);").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected 'Hello beautiful world!' not to match /beautiful/\n" +
                "\n" +
                "Hello beautiful world!"
            );
        }
        return expect.promise.all(testPromises);
    });

    it("index.md contains correct examples", function () {
        var testPromises = [];
        try {
            expect({ text: 'f00!' }, 'to equal', { text: 'foo!' });
            expect.fail(function (output) {
                output.error("expected:").nl();
                output.code("expect({ text: 'f00!' }, 'to equal', { text: 'foo!' });").nl();
                output.error("to throw");
            });
        } catch (e) {
            expect(e, "to have message",
                "expected { text: 'f00!' } to equal { text: 'foo!' }\n" +
                "\n" +
                "{\n" +
                "  text: 'f00!' // should equal 'foo!'\n" +
                "               // -f00!\n" +
                "               // +foo!\n" +
                "}"
            );
        }
        return expect.promise.all(testPromises);
    });
});
